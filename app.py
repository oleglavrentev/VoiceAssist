from sklearn.feature_extraction.text import from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
import sounddevice as sd
import vosk
import json
import queue

import words
from skills import *
import voice
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QAction, QWidget
import sys
import newinterface, spravkaui, house, institut, rukovodstvo, organization, abiturient

import threading



q = queue.Queue()
model = vosk.Model('model_small')
device = sd.default.device  # <--- по умолчанию
# или -> sd.default.device = 1, 3, python -m sounddevice просмотр
samplerate = int(sd.query_devices(device[0], 'input')['default_samplerate'])  # получаем частоту микрофона


class Spravka(QtWidgets.QMainWindow, spravkaui.Ui_Spravka):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class House(QtWidgets.QMainWindow, house.Ui_House):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.first.triggered.connect(self.show_first)
        self.second.triggered.connect(self.show_second)
        self.third.triggered.connect(self.show_third)
        self.fourth.triggered.connect(self.show_fourth)
        self.obth.triggered.connect(self.show_obth)

    def show_first(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про общежитие номер один'),
                  self.tr('2. Что можешь сказать про первое общежитие?'),
                  self.tr('3. Где находится первое общежитие?'),
                  self.tr('4. Какой адрес у общежития номер один?'),
                  self.tr('5. Сколько идти до вуза от первого общежития?'),
                  self.tr('6. Долго добираться до вуза от общежития номер один?')]
        self.listWidget.addItems(items)

    def show_second(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про общежитие номер два'),
                 self.tr('2. Что можешь сказать про второе общежитие?'),
                 self.tr('3. Где находится второе общежитие?'),
                 self.tr('4. Какой адрес у общежития номер два?'),
                 self.tr('5. Сколько идти до вуза от второго общежития?'),
                 self.tr('6. Долго добираться до вуза от общежития номер два?')]
        self.listWidget.addItems(items)

    def show_third(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про общежитие номер три'),
                 self.tr('2. Что можешь сказать про третье общежитие?'),
                 self.tr('3. Где находится третье общежитие?'),
                 self.tr('4. Какой адрес у общежития номер три?'),
                 self.tr('5. Сколько идти до вуза от третьего общежития?'),
                 self.tr('6. Долго добираться до вуза от общежития номер три?')]
        self.listWidget.addItems(items)

    def show_fourth(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про общежитие номер четыре'),
                 self.tr('2. Что можешь сказать про четвертое общежитие?'),
                 self.tr('3. Где находится четвертое общежитие?'),
                 self.tr('4. Какой адрес у общежития номер четыре?'),
                 self.tr('5. Сколько идти до вуза от четвертого общежития?'),
                 self.tr('6. Долго добираться до вуза от общежития номер четыре?')]
        self.listWidget.addItems(items)

    def show_obth(self):
        self.listWidget.clear()
        items = [self.tr('1. Cкажи про общежития вуза'),
                  self.tr('2. Покажи наши общежития'),
                  self.tr('3. Сколько общежитий у вуза?'),]
        self.listWidget.addItems(items)

class Institut(QtWidgets.QMainWindow, institut.Ui_Institut):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.icte_obth.triggered.connect(self.show_icte_obth)
        self.icte_kaf.triggered.connect(self.show_icte_kaf)
        self.icte_nap.triggered.connect(self.show_icte_nap)
        self.itce_prof.triggered.connect(self.show_icte_prof)
        self.iee_obth.triggered.connect(self.show_iee_obth)
        self.iee_kaf.triggered.connect(self.show_iee_kaf)
        self.iee_nap.triggered.connect(self.show_iee_nap)
        self.iee_prof.triggered.connect(self.show_iee_prof)
        self.ite_obth.triggered.connect(self.show_ite_obth)
        self.ite_kaf.triggered.connect(self.show_ite_kaf)
        self.ite_nap.triggered.connect(self.show_ite_nap)
        self.ite_prof.triggered.connect(self.show_ite_prof)

    def show_icte_obth(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про институт цифровых технологий и экономики'),
                self.tr('2. Сколько выпускающих кафедр в институте цифровых технологий и экономики?'),
                self.tr('3. Кто директор института цифровых технологий и экономики?'),
                self.tr('4. Расскажи про Беляева Эдуарда Ирековича'),
                self.tr('5. Покажи контактную информацию института цифровых технологий и экономики'),
                self.tr('6. Покажи дирекцию института цифровых технологий и экономики'),
                self.tr('7. Какие кафедры у института цифровых технологий и экономики?')]
        self.listWidget.addItems(items)

    def show_icte_kaf(self):
        self.listWidget.clear()
        items = [self.tr('1. Можешь показать где находится кафедра Информационные технологии и интеллектуальные системы?'),
                 self.tr('2. Можешь показать где находится кафедра Инженерная кибернетика?'),
                 self.tr('3. Можешь показать где находится кафедра Социология, политология и право?'),
                 self.tr('4. Кто заведующий кафедры Информационные технологии и интеллектуальные системы?'),
                 self.tr('5. Кто заведующий кафедры Инженерная кибернетика?'),
                 self.tr('6. Кто заведующий кафедры Менеджмент?'),
                 self.tr('7. Кто заведующий кафедры Социология, политология и право?'),
                 self.tr('8. Кто заведующий кафедры Философия и медиакоммуникации?'),
                 self.tr('9. Кто заведующий кафедры Экономика и организация производства?'),
                 self.tr('10. Кто заведующий кафедры Приборостроение и мехатроника?'),
                 self.tr('11. Скажи кто заведующий кафедры Физическое воспитание'),
                 self.tr('12. Скажи кто заведующий кафедры Иностранные языки'),
                 self.tr('13. Скажи кто заведующий кафедры Инженерная графика'),
                 self.tr('14. Скажи кто заведующий кафедры История и педагогика'),
                 self.tr('15. Скажи кто заведующий кафедры Высшая математика'),
                 ]
        self.listWidget.addItems(items)

    def show_icte_nap(self):
        self.listWidget.clear()
        items = [self.tr('1. Какие профили есть у напраления Прикладная математика для бакалавров?'),
                self.tr('2. Какие профили есть у напраления Информатика и вычислительная техника для бакалавров?'),
                self.tr('3. Какие профили есть у напраления Прикладная информатика для бакалавров?'),
                self.tr('4. Какие профили есть у напраления Приборостроение для бакалавров?'),
                self.tr('5. Какие профили есть у напраления Мехатроника и робототехника для бакалавров?'),
                self.tr('6. Какие профили есть у напраления Социология для бакалавров?'),
                self.tr('7. Какие профили есть у напраления Менеджмент для бакалавров?'),
                self.tr('8. Какие профили есть у напраления Экономика для бакалавров?'),
                self.tr('9. Какие профили есть у напраления Реклама и связи с общественностью для бакалавров?'),
                self.tr('10. Какие профили есть у напраления Информатика и вычислительная техника для магистров?'),
                self.tr('11. Какие профили есть у напраления Прикладная информатика для магистров?'),
                self.tr('12. Какие профили есть у напраления Приборостроение для магистров?'),
                self.tr('13. Какие профили есть у напраления Мехатроника и робототехника для магистров?'),
                self.tr('14. Какие профили есть у напраления Менеджмент для магистров?')]
        self.listWidget.addItems(items)

    def show_icte_prof(self):
        self.listWidget.clear()
        items = [self.tr('1. Опиши профиль Математическое и программное обеспечение систем искусственного интеллекта'),
                 self.tr('2. Какие главные учебные дисциплины у профиля Математическое и программное обеспечение систем искусственного интеллекта'),
                 self.tr('3. Опиши профиль Информационные системы управления бизнес-процессами'),
                 self.tr('4. Какие главные учебные дисциплины у профиля Информационные системы управления бизнес-процессами'),
                 self.tr('5. Опиши профиль технологии разработки информационных систем и web-приложений'),
                 self.tr('6. Какие главные учебные дисциплины у профиля Технологии разработки информационных систем и web-приложений'),
                 self.tr('7. Опиши профиль Технологии разработки программного обеспечения'),
                 self.tr('8. Какие главные учебные дисциплины у профиля Технологии разработки программного обеспечения'),
                 self.tr('9. Рпиши профиль Прикладная информатика в экономике и анализ данных'),
                 self.tr('10. Какие главные учебные дисциплины у профиля Прикладная информатика в экономике и анализ данных'),
                 self.tr('11. Рпиши профиль Автоматизированные системы контроля качества и диагностики'),
                 self.tr('12. Какие главные учебные дисциплины у профиля Автоматизированные системы контроля качества и диагностики'),
                 self.tr('13. Опиши профиль Мехатроника'),
                 self.tr('14. Какие главные учебные дисциплины у профиля Мехатроника'),
                 self.tr('15. Опиши профиль Экономика предприятий и организаций'),
                 self.tr('16. Какие главные учебные дисциплины у профиля Экономика предприятий и организаций'),
                 self.tr('17. Опиши профиль Менеджмент организации'),
                 self.tr('18. Какие главные учебные дисциплины у профиля  Менеджмент организации'),
                 self.tr('19. Опиши профиль Экономическая социология и маркетинг'),
                 self.tr('20. Какие главные учебные дисциплины у профиля Экономическая социология и маркетинг'),
                 self.tr('21. Опиши профиль Реклама и связи с общественностью в коммерческой сфере'),
                 self.tr('22. Какие главные учебные дисциплины у профиля Реклама и связи с общественностью в коммерческой сфере')]
        self.listWidget.addItems(items)

    def show_iee_obth(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про институт электроэнергетики и электроники'),
                self.tr('2. Сколько выпускающих кафедр в институте электроэнергетики и электроники?'),
                self.tr('3. Кто директор института электроэнергетики и электроники?'),
                self.tr('4. Расскажи про Ахметову Римму Валентиновну'),
                self.tr('5. Покажи контактную информацию института электроэнергетики и электроники'),
                self.tr('6. Покажи дирекцию института электроэнергетики и электроники'),
                self.tr('7. Какие кафедры у института электроэнергетики и электроники?')]
        self.listWidget.addItems(items)

    def show_iee_kaf(self):
        self.listWidget.clear()
        items = [self.tr('1. Как пройти к кафедре Промышленная электроника?'),
                 self.tr('2. Как пройти к кафедре Теоретических основ электротехники?'),
                 self.tr('3. Как пройти к кафедре Электроснабжение промышленных предприятий?'),
                 self.tr('4. Как пройти к кафедре Электрические станции?'),
                 self.tr('5. Как пройти к кафедре Электроэнергетические системы и сети?'),
                 self.tr('6. Как пройти к кафедре Электротехнические комплексы и системы?'),
                 self.tr('7. Как пройти к кафедре Релейной защиты и автоматизации  электроэнергетических систем?'),
                 self.tr('8. Как пройти к кафедре Электрооборудование и электрохозяйство предприятий организаций и учреждений?'),
                 self.tr('9. Как пройти к кафедре Инженерная экология и безопасность труда?'),
                 self.tr('10. Можешь сказать кто заведующий кафедры Промышленная электроника?'),
                 self.tr('11. Можешь сказать кто заведующий кафедры Теоретических основ электротехники?'),
                 self.tr('12. Можешь сказать кто заведующий кафедры Электроснабжение промышленных предприятий?'),
                 self.tr('13. Можешь сказать кто заведующий кафедры Электрические станции?'),
                 self.tr('14. Можешь сказать кто заведующий кафедры Электроэнергетические системы и сети?'),
                 self.tr('15. Можешь сказать кто заведующий кафедры Электротехнические комплексы и системы?'),
                 self.tr('16. Можешь сказать кто заведующий кафедры Релейной защиты и автоматизации  электроэнергетических систем?'),
                 self.tr('17. Можешь сказать кто заведующий кафедры Электрооборудование и электрохозяйство предприятий организаций и учреждений?'),
                 self.tr('18. Можешь сказать кто заведующий кафедры Инженерная экология и безопасность труда?'),
                 self.tr('19. Можешь сказать кто заведующий кафедры Физика?'),
                 ]
        self.listWidget.addItems(items)

    def show_iee_nap(self):
        self.listWidget.clear()
        items = [self.tr('1. Какие профили есть у напраления Электроника и наноэлектроника для бакалавров?'),
                self.tr('2. Какие профили есть у напраления Электроэнергетика и электротехника для бакалавров?'),
                self.tr('3. Какие профили есть у напраления Техносферная безопасность для бакалавров?'),
                self.tr('4. Какие профили есть у напраления Электроника и наноэлектроника для магистров?'),
                self.tr('5. Какие профили есть у напраления Электроэнергетика и электротехника для магистров?'),
                self.tr('6. Какие профили есть у напраления Техносферная безопасность для магистров?')]
        self.listWidget.addItems(items)

    def show_iee_prof(self):
        self.listWidget.clear()
        items = [self.tr('1. Что скажешь про профиль Квантовая оптическая электроника и фотоника'),
                 self.tr('2. Какие ключевые учебные дисциплины у профиля Квантовая оптическая электроника и фотоника'),
                 self.tr('3. Что скажешь про профиль Промышленная электроника'),
                 self.tr('4. Какие ключевые учебные дисциплины у профиля Промышленная электроника'),
                 self.tr('5. Что скажешь про профиль Возобновляемые источники энергии'),
                 self.tr('6. Какие ключевые учебные дисциплины у профиля Возобновляемые источники энергии'),
                 self.tr('7. Что скажешь про профиль Высоковольтные электроэнергетика И электроника'),
                 self.tr('8. Какие ключевые учебные дисциплины у профиля Высоковольтные электроэнергетика И электроника'),
                 self.tr('9. Что скажешь про профиль Релейная защита и автоматизация электроэнергетических систем'),
                 self.tr('10. Какие ключевые учебные дисциплины у профиля Релейная защита и автоматизация электроэнергетических систем'),
                 self.tr('11. Что скажешь про профиль Цифровые системы автоматизации в электроэнергетике'),
                 self.tr('12. Какие ключевые учебные дисциплины у профиля Цифровые системы автоматизации в электроэнергетике'),
                 self.tr('13. Что скажешь про профиль Электрические станции и подстанции'),
                 self.tr('14. Какие ключевые учебные дисциплины у профиля Электрические станции и подстанции'),
                 self.tr('15. Что скажешь про профиль Электромеханические комплексы и системы'),
                 self.tr('16. Какие ключевые учебные дисциплины у профиля Электромеханические комплексы и системы'),
                 self.tr('17. Что скажешь про профиль Электромобильный и беспилотный транспорт'),
                 self.tr('18. Какие ключевые учебные дисциплины у профиля Электромобильный и беспилотный транспорт'),
                 self.tr('19. Что скажешь про профиль Электрооборудование и электрохозяйство предприятий, организаций и учреждений'),
                 self.tr('20. Какие ключевые учебные дисциплины у профиля Электрооборудование и электрохозяйство предприятий, организаций и учреждений'),
                 self.tr('21. Что скажешь про профиль Электроснабжение'),
                 self.tr('22. Какие ключевые учебные дисциплины у профиля Электроснабжение'),
                 self.tr('23. Что скажешь про профиль Электроэнергетические системы и сети'),
                 self.tr('24. Какие ключевые учебные дисциплины у профиля Электроэнергетические системы и сети'),
                 self.tr('25. Что скажешь про профиль Инженерная защита окружающей среды'),
                 self.tr('26. Какие ключевые учебные дисциплины у профиля Инженерная защита окружающей среды')]
        self.listWidget.addItems(items)

    def show_ite_obth(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про институт теплоэнергетики'),
                self.tr('2. Что можешь сказать про институт теплоэнергетики?'),
                self.tr('3. Покажи информацию про институт теплоэнергетики'),
                self.tr('4. Сколько выпускающих кафедр у институт теплоэнергетики?'),
                self.tr('5. Кто директор института теплоэнергетики?'),
                self.tr('6. Расскажи про Гапоненко Сергея Олеговича'),
                self.tr('7. Выведи контактную информацию института теплоэнергетики'),
                self.tr('8. Покажи дирекцию института теплоэнергетики'),
                self.tr('9. Какие кафедры в институте теплоэнергетики?')]
        self.listWidget.addItems(items)

    def show_ite_kaf(self):
        self.listWidget.clear()
        items = [self.tr('1. Где находится кафедра Атомные и тепловые электрические станции?'),
                 self.tr('2. Где находится кафедра Промышленная теплоэнергетика и системы теплоснабжения?'),
                 self.tr('3. Где находится кафедра Энергообеспечение предприятий, строительство зданий и сооружений?'),
                 self.tr('4. Где находится кафедра Энергетическое машиностроение?'),
                 self.tr('5. Где находится кафедра Автоматизация технологических процессов и производств?'),
                 self.tr('6. Где находится кафедра Теоретические основы теплотехники?'),
                 self.tr('7. Кто заведующий кафедры Атомные и тепловые электрические станции?'),
                 self.tr('8. Кто заведующий кафедры Промышленная теплоэнергетика и системы теплоснабжения?'),
                 self.tr('9. Кто заведующий кафедры Энергообеспечение предприятий, строительство зданий и сооружений?'),
                 self.tr('10. Кто заведующий кафедры Энергетическое машиностроение?'),
                 self.tr('11. Кто заведующий кафедры Автоматизация технологических процессов и производств?'),
                 self.tr('12. Кто заведующий кафедры Теоретические основы теплотехники?'),
                 self.tr('13. Кто заведующий кафедры Химия и водородная энергетика?'),
                 self.tr('14. Кто заведующий кафедры Материаловедение и технологии материалов?')]
        self.listWidget.addItems(items)

    def show_ite_nap(self):
        self.listWidget.clear()
        items = [self.tr('1. Покажи профили напраления Теплоэнергетика и теплотехника для бакалавров'),
                self.tr('2. Покажи профили напраления Энергетическое машиностроение для бакалавров'),
                self.tr('3. Покажи профили напраления Автоматизация технологических процессов и производств для бакалавров'),
                self.tr('4. Покажи профили напраления Техническая физика для бакалавров'),
                self.tr('5. Покажи профили напраления Материаловедение и технологии материалов для бакалавров'),
                self.tr('6. Покажи профили напраления  Управление в технических системах для бакалавров'),
                self.tr('7. Покажи профили напраления Водные биоресурсы и аквакультура для бакалавров'),
                self.tr('8. Покажи профили напраления Теплоэнергетика и теплотехника для магистров'),
                self.tr('9. Покажи профили напраления Энергетическое машиностроение для магистров'),
                self.tr('10. Покажи профили напраления Автоматизация технологических процессов и производств для магистров'),
                self.tr('11. Покажи профили напраления Техническая физика для магистров'),
                self.tr('12. Покажи профили напраления Строительство для магистров'),
                self.tr('13. Покажи профили напраления  Управление в технических системах для магистров'),
                self.tr('14. Покажи профили напраления Водные биоресурсы и аквакультура для магистров')]
        self.listWidget.addItems(items)

    def show_ite_prof(self):
        self.listWidget.clear()
        items = [self.tr('1. Расскажи про профиль Автономные энергетические системы'),
                 self.tr('2. Основные учебные дисциплины профиля Автономные энергетические системы'),
                 self.tr('3. Расскажи про профиль Проектирование теплоэнергетических систем'),
                 self.tr('4. Основные учебные дисциплины профиля Проектирование теплоэнергетических систем'),
                 self.tr('5. Расскажи про профиль Промышленная теплоэнергетика'),
                 self.tr('6. Основные учебные дисциплины профиля Промышленная теплоэнергетика'),
                 self.tr('7. Расскажи про профиль Тепловые электрические станции'),
                 self.tr('8. Основные учебные дисциплины профиля Тепловые электрические станции'),
                 self.tr('9. Расскажи про профиль Энергетика жилищно-коммунального хозяйства'),
                 self.tr('10. Основные учебные дисциплины профиля Энергетика жилищно-коммунального хозяйства'),
                 self.tr('11. Расскажи про профиль Энергообеспечение предприятий'),
                 self.tr('12. Основные учебные дисциплины профиля Энергообеспечение предприятий'),
                 self.tr('13. Расскажи про профиль Газотурбинные, паротурбинные установки и двигателив'),
                 self.tr('14. Основные учебные дисциплины профиля Газотурбинные, паротурбинные установки и двигатели'),
                 self.tr('15. Расскажи про профиль Автоматизация технологических процессов и производств'),
                 self.tr('16. Основные учебные дисциплины профиля Автоматизация технологических процессов и производств'),
                 self.tr('17. Расскажи что нибудь про профиль Теплофизика'),
                 self.tr('18. Основные учебные дисциплины профиля Теплофизика'),
                 self.tr('19. Расскажи про профиль Управление и информатика в технических системах'),
                 self.tr('20. Основные учебные дисциплины профиля Управление и информатика в технических системах')]
        self.listWidget.addItems(items)

class Rukovodstvo(QtWidgets.QMainWindow, rukovodstvo.Ui_Rukovodstvo):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class Organization(QtWidgets.QMainWindow, organization.Ui_Organization):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class Abiturient(QtWidgets.QMainWindow, abiturient.Ui_Abiturient):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class Assist(QtWidgets.QMainWindow, newinterface.Ui_MainWindow):

    def __init__(self):
        # Это здесь нужно для доступа к переменным, методам
        # и т.д. в файле newinterface.py
        super().__init__()
        self.setupUi(self)
        self.pushButton.pressed.connect(self.start_thread_assist)
        self.pushButton_2.pressed.connect(self.off)
        self.info.triggered.connect(self.show_spravka)
        self.action_house.triggered.connect(self.show_house)
        self.action_institut.triggered.connect(self.show_institut)
        self.action_rukovodstvo.triggered.connect(self.show_rukovodstvo)
        self.action_org.triggered.connect(self.show_organization)
        self.action_abbit.triggered.connect(self.show_abiturient)


    def show_spravka(self):  # открытие 2  окна
        self.Spravka = Spravka()
        self.Spravka.show()

    def show_house(self):  # открытие 2  окна
        self.House = House()
        self.House.show()

    def show_institut(self):  # открытие 2  окна
        self.Institut = Institut()
        self.Institut.show()

    def show_rukovodstvo(self):  # открытие 2  окна
        self.Rukovodstvo = Rukovodstvo()
        self.Rukovodstvo.show()

    def show_organization(self):  # открытие 2  окна
        self.Organization = Organization()
        self.Organization.show()

    def show_abiturient(self):  # открытие 2  окна
        self.Abiturient = Abiturient()
        self.Abiturient.show()

    def callback(self ,indata, frames, time, status):
        '''
        Добавляет в очередь семплы из потока.
        вызывается каждый раз при наполнении blocksize
        в sd.RawInputStream'''

        q.put(bytes(indata))


    def recognize(self, data, vectorizer, clf):
        '''
        Анализ распознанной речи
        '''

        # проверяем есть ли имя бота в data, если нет, то return
        trg = words.TRIGGERS.intersection(data.split())
        if not trg:
            return

        # удаляем имя бота из текста
        data.replace(list(trg)[0], '')

        # получаем вектор полученного текста
        # сравниваем с вариантами, получая наиболее подходящий ответ
        text_vector = vectorizer.transform([data]).toarray()[0]
        answer = clf.predict([text_vector])[0]

        # получение имени функции из ответа из data_set
        func_name = answer.split()[0]

        # озвучка ответа из модели data_set
        voice.speaker(answer.replace(func_name, ''))
        #добавления ответа в qt disegner
        item = QtWidgets.QListWidgetItem()
        item.setText(answer.replace(func_name, ''))
        self.listWidget.addItem(item)

        # запуск функции из skills
        exec(func_name + '()')

    def off(self):
        '''Отключает бота'''
        sys.exit()

    def start_thread_assist(self):
        thread = threading.Thread(target=self.main, args=())
        thread.start()

    def main(self):
        '''
        Обучаем матрицу ИИ
        и постоянно слушаем микрофон
        '''

        #Обучение матрицы на data_set модели
        vectorizer = CountVectorizer()
        vectors = vectorizer.fit_transform(list(words.data_set.keys()))

        clf = LogisticRegression()
        clf.fit(vectors, list(words.data_set.values()))

        del words.data_set

        # постоянная прослушка микрофона
        with sd.RawInputStream(samplerate=samplerate, blocksize=16000, device=device[0], dtype='int16',
                               channels=1, callback=self.callback):

            rec = vosk.KaldiRecognizer(model, samplerate)
            while True:
                data = q.get()
                if rec.AcceptWaveform(data):
                    data = json.loads(rec.Result())['text']
                    self.recognize(data, vectorizer, clf)
                # else:
                #     print(rec.PartialResult())



    #if __name__ == '__main__':
        #main()
app = QtWidgets.QApplication([])
window = Assist()
window.show()
app.exec_()
